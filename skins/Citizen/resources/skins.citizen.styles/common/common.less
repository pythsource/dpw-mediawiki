/*
 * Framework
*/
html {
	box-sizing: border-box;
}

html,
body {
	min-height: 100vh;
	padding: 0;
	margin: 0;
	color: var( --color-base );
	accent-color: var( --color-progressive );
	background-color: var(--color-surface-0);
	background-image: url("data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23000000' fill-opacity='0.05' fill-rule='evenodd'%3E%3Cpath d='M0 40L40 0H20L0 20M40 40V20L20 40'/%3E%3C/g%3E%3C/svg%3E");
}

body {
	position: relative;
}
@keyframes crtflicker {
  0% {
    opacity: 0.27861;
  }
  5% {
    opacity: 0.34769;
  }
  10% {
    opacity: 0.23604;
  }
  15% {
    opacity: 0.90626;
  }
  20% {
    opacity: 0.18128;
  }
  25% {
    opacity: 0.83891;
  }
  30% {
    opacity: 0.65583;
  }
  35% {
    opacity: 0.67807;
  }
  40% {
    opacity: 0.26559;
  }
  45% {
    opacity: 0.84693;
  }
  50% {
    opacity: 0.96019;
  }
  55% {
    opacity: 0.08594;
  }
  60% {
    opacity: 0.20313;
  }
  65% {
    opacity: 0.71988;
  }
  70% {
    opacity: 0.53455;
  }
  75% {
    opacity: 0.37288;
  }
  80% {
    opacity: 0.71428;
  }
  85% {
    opacity: 0.70419;
  }
  90% {
    opacity: 0.7003;
  }
  95% {
    opacity: 0.36108;
  }
  100% {
    opacity: 0.24387;
  }
}
body::after {
  content: " ";
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: rgba(18, 16, 16, 0.1);
  opacity: 0;
  z-index: 201;
  pointer-events: none;
  animation: crtflicker 0.15s infinite;
}
body::before {
  content: " ";
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: linear-gradient(rgba(18, 16, 16, 0) 50%, rgba(0, 0, 0, 0.25) 50%), linear-gradient(90deg, rgba(255, 0, 0, 0.06), rgba(0, 255, 0, 0.02), rgba(0, 0, 255, 0.06));
  z-index: 201;
  background-size: 100% 2px, 3px 100%;
  pointer-events: none;
}

// Apply border-box universally unless overwritten
*,
*::before,
*::after {
	box-sizing: inherit;
	border-color: var( --border-color-base );
	border-style: solid;
	border-width: 0;
}

:focus {
	outline-color: var( --color-progressive );
}

// For some reason just overriding the outline-color is not enough
:focus-visible {
	outline: var( --border-width-thick ) solid var( --color-progressive );
	outline-offset: 1px;
}

::placeholder {
	color: var( --color-subtle );
}

::selection {
	color: var( --color-inverted-primary );
	background-color: var( --color-progressive );
}

input,
select,
textarea {
	color: var( --color-emphasized );
	background-color: transparent;
	border: var( --border-width-base ) solid var( --border-color-interactive );
}

select option {
	background-color: var( --color-surface-1 );
}

textarea {
	width: 100%;
}

blockquote {
	margin: var( --space-md );
	color: var( --color-subtle );

	cite {
		display: block;
		margin-top: var( --space-sm );

		&::before {
			content: 'â€” ';
		}
	}
}

button {
	font-family: var( --font-family-base );
}

sup,
sub {
	line-height: 1;
}

th {
	font-weight: var( --font-weight-semibold );
	color: var( --color-emphasized );
}

/* Remove outer margin in table cell */
th,
td {
	> p,
	> ul,
	> ol {
		&:first-child {
			margin-top: 0;
		}

		&:last-child {
			margin-bottom: 0;
		}
	}
}

.hidden,
.sr-only {
	.sr-only;
}

.nowrap {
	white-space: nowrap;
}

.citizen-button {
	padding: 0;
	appearance: none;
	cursor: pointer;
	background: transparent;
	border: 0;
}

/*
 * Content
*/
.mw-body,
.parsoid-body {
	direction: ltr;
}

// TODO: Think of better places to put indicators;
.mw-indicators {
	display: flex;
	align-items: center;
	padding-left: 10px;
	margin-left: 10px;
	font-size: var( --font-size-small );
	border-left: var( --border-width-base ) solid var( --border-color-base );
}

.mw-indicator {
	filter: var( --filter-invert );
}

#mw-indicator-mw-helplink a {
	font-size: 0; /* Hide the text because the color is weird */
}

video {
	max-width: 100%; // Prevent overflow
}

.skin-theme-clientpref-night {
	.mw-indicator {
		// Have to hardcode the color since the filter breaks the color
		a {
			color: @color-primary;

			&:hover {
				color: @color-primary--hover;
			}

			&:active {
				color: @color-primary--active;
			}
		}
	}
}

@media ( hover: none ) {
	a,
	button,
	label {
		// Remove the 300ms delay in click event (T118509)
		touch-action: manipulation;
	}
}

@media ( max-width: @max-width-breakpoint-tablet ) {
	.mw-body,
	.parsoid-body {
		overflow-x: hidden; // fallback if clip is not supported
		overflow-x: clip; // avoid breaking layout in smaller screen sizes
	}
}
